generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================================================
// Enums
// =======================================================

enum Role {
  SUPER_ADMIN     // Dono do sistema com acesso total
  COMPANY_ADMIN   // Administrador de uma empresa
  INSTRUCTOR      // Criador/gerenciador de conteúdos
  STUDENT         // Usuário convertido de candidato
  USER            // Usuário básico
}

enum Status {
  PENDING         // Aguardando ação
  APPROVED        // Aprovado oficialmente
  REJECTED        // Rejeitado definitivamente
}

enum ProcessStageStatus {
  PENDING         // Etapa não iniciada
  IN_PROGRESS     // Etapa em andamento
  COMPLETED       // Etapa finalizada
}

enum ApprovalStatus {
  PENDING_EVALUATION  // Aguardando avaliação
  APPROVED_FOR_HIRING // Aprovado para contratação
  ON_HOLD             // Em espera/banco de talentos
}

enum QuestionType {
  MULTIPLE_CHOICE     // Questão com resposta correta
  OPINION_MULTIPLE    // Questão opinativa categorizada
}

enum DifficultyLevel {
  EASY        // Questão simples
  MEDIUM      // Questão moderada
  HARD        // Questão complexa
}

enum TestType {
  SELECTION    // Teste para processo seletivo
  COURSE_PRE   // Teste diagnóstico pré-curso
  COURSE_POST  // Teste final de curso
}

enum InviteStatus {
  PENDING     // Convite não enviado
  SENT        // Convite enviado
  EXPIRED     // Convite expirado
  COMPLETED   // Teste finalizado
  CANCELED    // Convite revogado
}

enum SubscriptionStatus {
  ACTIVE      // Assinatura ativa
  PENDING     // Aguardando pagamento
  EXPIRED     // Assinatura expirada
  CANCELED    // Assinatura cancelada
}

enum PaymentMethod {
  CREDIT_CARD  // Cartão de crédito
  BANK_SLIP    // Boleto bancário
  BANK_TRANSFER // Transferência bancária
  PIX          // Pagamento via PIX
  MANUAL       // Pagamento manual (registrado pelo admin)
}

enum PaymentStatus {
  PENDING      // Aguardando pagamento
  PAID         // Pagamento confirmado
  FAILED       // Pagamento falhou
  REFUNDED     // Pagamento reembolsado
}

// =======================================================
// Models
// =======================================================

model Company {
  id              String        @id @default(uuid())
  name            String        // Nome da empresa
  cnpj            String?       @unique // CNPJ único
  plan            Plan?         @relation(fields: [planId], references: [id])
  planId          String?       // Plano atual
  planType        String        @default("Free") // Tipo de plano (Free, Pro, Enterprise)
  isActive        Boolean       @default(true) // Conta ativa
  maxUsers        Int           @default(10) // Limite de usuários
  maxCandidates   Int           @default(100) // Limite de candidatos
  lastPaymentDate DateTime?     // Data do último pagamento
  trialEndDate    DateTime?     // Fim do período de teste
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relacionamentos
  users           User[]
  tests           Test[]
  candidates      Candidate[]
  processes       SelectionProcess[]
  globalAccess    GlobalAccess[]
  questions       Question[]
  responses       Response[]
  testInvitations TestInvitation[]
  usedInviteCodes UsedInviteCode[]
  students        Student[]
  candidateProgress CandidateProgress[]
  subscription    Subscription?
  paymentHistory  PaymentHistory[]
}

model User {
  id              String        @id @default(uuid())
  name            String        // Nome completo
  email           String        @unique // E-mail único
  password        String        // Senha criptografada
  role            Role          @default(USER)
  companyId       String?       // Empresa vinculada
  company         Company?      @relation(fields: [companyId], references: [id])
  studentProfile  Student?      // Perfil de aluno se convertido
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  candidateProgress CandidateProgress[]
}

model Candidate {
  id              String        @id @default(uuid())
  // Dados Pessoais
  name            String        
  email           String        
  phone           String?       
  position        String?       // Cargo pretendido
  photoUrl        String?       // URL da foto do perfil
  instagram       String?       // Perfil do Instagram
  socialMediaUrl  String?       // Outras redes sociais
  
  // Configurações do Teste
  requestPhoto    Boolean       @default(true) // Solicitar foto
  showResults     Boolean       @default(true) // Mostrar resultados após teste
  
  // Processo Seletivo
  testDate        DateTime?     // Data agendada para teste
  completed       Boolean       @default(false)
  score           Int?          @default(0) // Pontuação final
  timeSpent       Int?          @default(0) // Tempo total gasto (segundos)
  
  // Convites
  inviteCode      String?       @unique // Código único do convite
  inviteSent      Boolean       @default(false)
  inviteAttempts  Int           @default(0) // Tentativas de acesso
  inviteExpires   DateTime?     // Validade do convite
  
  // Documentos
  resumeUrl       String?       // URL do currículo
  resumeFile      String?       // Arquivo físico do currículo
  infoJobsLink    String?       // Link de plataforma externa
  
  // Avaliação
  rating          Float?        // Nota geral (0-10)
  observations    String?       // Anotações do recrutador
  interviewDate   DateTime?     // Data da entrevista
  
  // Status
  status          Status        @default(PENDING)
  overallStatus   ApprovalStatus @default(PENDING_EVALUATION)
  
  // Relacionamentos
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String        
  test            Test?         @relation(fields: [testId], references: [id])
  testId          String?       
  process         SelectionProcess? @relation(fields: [processId], references: [id])
  processId       String?       
  responses       Response[]    
  testInvites     TestInvitation[]
  inviteHistory   UsedInviteCode[]
  convertedTo     Student?      // Registro de conversão para aluno
  progresses      CandidateProgress[] 
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SelectionProcess {
  id              String        @id @default(uuid())
  name            String        // Nome do processo (ex: "Desenvolvedor Front-end 2024")
  description     String?       // Descrição detalhada
  cutoffScore     Int?          // Nota mínima para aprovação
  expectedProfile Json?         // Perfil esperado (JSON)
  evaluationType  String        @default("SCORE_BASED") // Tipo de avaliação
  
  // Relacionamentos
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String        
  stages          ProcessStage[] // Etapas do processo
  candidates      Candidate[]   // Candidatos participantes
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ProcessStage {
  id              String        @id @default(uuid())
  name            String        // Nome da etapa (ex: "Entrevista Técnica")
  description     String?       // Instruções detalhadas
  order           Int           // Ordem de execução (1,2,3...)
  type            String        @default("TEST") // Tipo de etapa
  duration        Int?          // Duração estimada (minutos)
  requestPhoto    Boolean       @default(false) // Exigir foto nesta etapa
  
  // Relacionamentos
  process         SelectionProcess @relation(fields: [processId], references: [id])
  processId       String        
  progresses      CandidateProgress[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([order])
}

model CandidateProgress {
  id              String        @id @default(uuid())
  // Resultados
  testScore       Int?          // Pontuação obtida
  interviewScore  Int?          // Nota da entrevista (0-10)
  interviewNotes  String?       // Observações da entrevista
  
  // Status
  status          ProcessStageStatus @default(PENDING)
  finalDecision   ApprovalStatus @default(PENDING_EVALUATION)
  
  // Relacionamentos
  candidate       Candidate     @relation(fields: [candidateId], references: [id])
  candidateId     String        
  stage           ProcessStage  @relation(fields: [stageId], references: [id])
  stageId         String        
  interviewer     User?         @relation(fields: [interviewerId], references: [id])
  interviewerId   String?       
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String        
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Test {
  id              String        @id @default(uuid())
  title           String        // Título do teste
  description     String?       // Descrição/instruções
  timeLimit       Int?          // Limite de tempo em minutos
  cutoffScore     Int?          // Nota mínima para aprovação
  expectedProfile Json?         // Perfil esperado (JSON)
  active          Boolean       @default(true) // Teste ativo/inativo
  showResults     Boolean       @default(true) // Exibir resultados aos candidatos
  
  // Relacionamentos
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String        
  stages          Stage[]       // Etapas do teste
  candidates      Candidate[]   
  globalVersions  GlobalAccess[] // Versões globais vinculadas
  testInvitations TestInvitation[]
  usedInviteCodes UsedInviteCode[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Stage {
  id              String        @id @default(uuid())
  title           String        // Título da etapa
  description     String?       // Descrição detalhada
  order           Int           // Ordem no teste
  requestPhoto    Boolean       @default(false) // Solicitar foto
  
  // Relacionamentos
  test            Test?         @relation(fields: [testId], references: [id])
  testId          String?       
  questions       Question[]    
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Question {
  id              String        @id @default(uuid())
  text            String        // Enunciado da questão
  type            QuestionType  @default(MULTIPLE_CHOICE)
  difficulty      DifficultyLevel @default(MEDIUM)
  showResults     Boolean       @default(true) // Mostrar resultado ao candidato
  
  // Relacionamentos
  stage           Stage         @relation(fields: [stageId], references: [id])
  stageId         String        
  options         Option[]      
  categories      Category[]    
  globalQuestion  GlobalQuestion? @relation(fields: [globalQuestionId], references: [id])
  globalQuestionId String?      
  company         Company?      @relation(fields: [companyId], references: [id])
  companyId       String?       
  responses       Response[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Option {
  id              String        @id @default(uuid())
  text            String        // Texto da opção
  isCorrect       Boolean       @default(false) // Resposta correta
  weight          Int?          @default(0) // Peso para questões opinativas
  
  // Relacionamentos
  question        Question      @relation(fields: [questionId], references: [id])
  questionId      String        
  category        Category?     @relation(fields: [categoryId], references: [id])
  categoryId      String?       
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Response {
  id              String        @id @default(uuid())
  // Dados congelados
  questionText    String        // Enunciado no momento da resposta
  optionText      String        // Opção selecionada
  isCorrect       Boolean       // Se a resposta está correta
  allOptions      Json?         // Snapshopt das opções disponíveis
  
  // Métricas
  timeSpent       Int           @default(0) // Tempo gasto (segundos)
  
  // Relacionamentos
  candidate       Candidate     @relation(fields: [candidateId], references: [id])
  candidateId     String        
  question        Question      @relation(fields: [questionId], references: [id])
  questionId      String        
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String        
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([candidateId, questionId]) // Garante uma resposta por questão
}

model TestInvitation {
  id              String        @id @default(uuid())
  code            String        @unique // Código único
  expiresAt       DateTime      // Data de expiração
  sentAt          DateTime?     // Data de envio
  attempts        Int           @default(0) // Tentativas de uso
  status          InviteStatus  @default(PENDING)
  
  // Relacionamentos
  test            Test          @relation(fields: [testId], references: [id])
  testId          String        
  candidate       Candidate     @relation(fields: [candidateId], references: [id])
  candidateId     String        
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String        
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([candidateId, testId]) // Um convite por teste/candidato
  @@index([code])
}

model UsedInviteCode {
  id              String        @id @default(uuid())
  code            String        @unique // Código utilizado
  usedAt          DateTime      // Data/hora do uso
  
  // Relacionamentos
  test            Test          @relation(fields: [testId], references: [id])
  testId          String        
  candidate       Candidate     @relation(fields: [candidateId], references: [id])
  candidateId     String        
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String        
  createdAt       DateTime      @default(now())
}

model Student {
  id              String        @id @default(uuid())
  // Dados Acadêmicos
  enrollmentDate  DateTime      @default(now()) // Data de matrícula
  progress        Float         @default(0) // Progresso geral
  
  // Relacionamentos
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @unique
  convertedFrom   Candidate?    @relation(fields: [convertedFromId], references: [id])
  convertedFromId String?       @unique
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String        
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
  options     Option[]
}

model Plan {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  companies   Company[]
  features    PlanFeature[]
  subscriptions Subscription[]
}

model PlanFeature {
  id          String   @id @default(uuid())
  planId      String
  featureId   String
  isIncluded  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  plan        Plan     @relation(fields: [planId], references: [id])
  feature     Feature  @relation(fields: [featureId], references: [id])

  @@unique([planId, featureId])
}

model Feature {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  planFeatures PlanFeature[]
}

model Subscription {
  id              String            @id @default(uuid())
  company         Company           @relation(fields: [companyId], references: [id])
  companyId       String            @unique
  plan            Plan              @relation(fields: [planId], references: [id])
  planId          String
  status          SubscriptionStatus @default(PENDING)
  startDate       DateTime
  endDate         DateTime?
  lastPaymentDate DateTime?
  nextPaymentDate DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relacionamentos
  paymentHistory  PaymentHistory[]
}

model PaymentHistory {
  id              String        @id @default(uuid())
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id])
  subscriptionId  String
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String
  amount          Float
  paymentDate     DateTime
  paymentMethod   PaymentMethod
  status          PaymentStatus
  transactionId   String?
  invoiceUrl      String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model GlobalTest {
  id              String        @id @default(uuid())
  title           String        // Título padrão
  description     String?       // Descrição genérica
  isActive        Boolean       @default(true) // Disponível para empresas
  
  // Relacionamentos
  questions       GlobalQuestion[] 
  companies       GlobalAccess[] // Empresas com acesso
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model GlobalQuestion {
  id              String        @id @default(uuid())
  text            String        // Enunciado padrão
  type            QuestionType  @default(MULTIPLE_CHOICE)
  difficulty      DifficultyLevel @default(MEDIUM)
  
  // Relacionamentos
  tests           GlobalTest[]  
  questions       Question[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model GlobalAccess {
  id              String        @id @default(uuid())
  // Relacionamentos
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String        
  globalTest      GlobalTest?   @relation(fields: [globalTestId], references: [id])
  globalTestId    String?       
  test            Test?         @relation(fields: [testId], references: [id])
  testId          String?
  createdAt       DateTime      @default(now())
}
