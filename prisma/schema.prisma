generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  company   String?
  position  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Candidate {
  id             String         @id @default(uuid())
  name           String
  email          String
  phone          String?
  position       String?
  testDate       DateTime       @default(now())
  completed      Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  infoJobsLink   String?
  interviewDate  DateTime?
  observations   String?
  rating         Float?
  resumeFile     String?
  socialMediaUrl String?
  status         Status         @default(PENDING)
  inviteCode     String?        @unique
  inviteSent     Boolean        @default(false)
  inviteAttempts Int            @default(0)
  inviteExpires  DateTime?
  github         String?
  linkedin       String?
  portfolio      String?
  resumeUrl      String?
  testId         String?
  test           tests?         @relation(fields: [testId], references: [id])
  responses      Response[]
  candidateTests CandidateTest[]
}

model Question {
  id             String          @id @default(uuid())
  text           String
  stageId        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  categoryId     String?
  options        Option[]
  Category       Category?       @relation(fields: [categoryId], references: [id])
  Stage          Stage           @relation(fields: [stageId], references: [id], onDelete: Cascade)
  responses      Response[]
  stageQuestions StageQuestion[]
  testQuestions  TestQuestion[]
}

model Option {
  id         String     @id @default(uuid())
  text       String
  isCorrect  Boolean    @default(false)
  questionId String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  responses  Response[]
}

model Response {
  id                 String    @id @default(uuid())
  candidateId        String
  questionId         String
  optionId           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  questionText       String
  optionText         String
  isCorrectOption    Boolean
  allOptionsSnapshot Json?
  questionSnapshot   Json?
  categoryName       String?
  stageName          String?
  candidate          Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  option             Option    @relation(fields: [optionId], references: [id])
  question           Question  @relation(fields: [questionId], references: [id])

  @@unique([candidateId, questionId])
}

model UsedInviteCode {
  id        String   @id @default(uuid())
  code      String   @unique
  usedAt    DateTime @default(now())
  expiresAt DateTime
}

model Stage {
  id             String          @id
  title          String
  description    String?
  order          Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  testId         String?
  Question       Question[]
  test           tests?          @relation(fields: [testId], references: [id])
  stageQuestions StageQuestion[]
  testQuestions  TestQuestion[]
  TestStage      TestStage[]
}

model TestStage {
  id        String   @id @default(uuid())
  testId    String
  stageId   String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stage     Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
  test      tests    @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([testId, stageId])
}

model tests {
  id             String          @id @default(uuid())
  title          String
  description    String?
  timeLimit      Int?
  active         Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  candidates     Candidate[]
  stages         Stage[]
  testQuestions  TestQuestion[]
  TestStage      TestStage[]
  candidateTests CandidateTest[]
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
}

model StageQuestion {
  id         String   @id @default(uuid())
  stageId    String
  questionId String
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  stage      Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([stageId, questionId])
  @@index([stageId])
  @@index([questionId])
}

model TestQuestion {
  id         String   @id @default(uuid())
  testId     String
  questionId String
  stageId    String
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id])
  stage      Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
  test       tests    @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([testId, stageId, questionId])
  @@index([testId])
  @@index([questionId])
  @@index([stageId])
}

// Nova tabela para relacionar candidatos e testes
model CandidateTest {
  id           String    @id @default(uuid())
  candidateId  String
  testId       String
  inviteCode   String    @unique
  inviteExpires DateTime?
  inviteSent   Boolean   @default(false)
  inviteAttempts Int     @default(0)
  completed    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  candidate    Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  test         tests     @relation(fields: [testId], references: [id], onDelete: Cascade)
  
  @@unique([candidateId, testId])
  @@index([candidateId])
  @@index([testId])
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
