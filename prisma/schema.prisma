generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                String              @id @default(uuid())
  name              String
  cnpj              String?             @unique
  isActive          Boolean             @default(true)
  maxUsers          Int                 @default(10)
  maxCandidates     Int                 @default(100)
  lastPaymentDate   DateTime?
  trialEndDate      DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  planId            String?
  planType          String              @default("Free")
  candidates        Candidate[]
  candidateProgress CandidateProgress[]
  plan              Plan?               @relation(fields: [planId], references: [id])
  globalAccess      GlobalAccess[]
  paymentHistory    PaymentHistory[]
  questions         Question[]
  responses         Response[]
  processes         SelectionProcess[]
  students          Student[]
  subscription      Subscription?
  tests             Test[]
  testInvitations   TestInvitation[]
  usedInviteCodes   UsedInviteCode[]
  users             User[]
  
  // Training system relations
  trainingCourses   TrainingCourse[]
  trainingSectors   TrainingSector[]
  trainingTests     TrainingTest[]
}

model User {
  id                String              @id @default(uuid())
  name              String
  email             String              @unique
  password          String
  role              Role                @default(USER)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  companyId         String?
  candidateProgress CandidateProgress[]
  studentProfile    Student?
  company           Company?            @relation(fields: [companyId], references: [id])
}

model Candidate {
  id             String              @id @default(uuid())
  name           String
  email          String
  phone          String?
  position       String?
  testDate       DateTime?
  completed      Boolean             @default(false)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  infoJobsLink   String?
  interviewDate  DateTime?
  observations   String?
  interviewNotes Json?
  rating         Float?
  resumeFile     String?
  socialMediaUrl String?
  status         Status              @default(PENDING)
  inviteCode     String?             @unique
  inviteSent     Boolean             @default(false)
  inviteAttempts Int                 @default(0)
  inviteExpires  DateTime?
  resumeUrl      String?
  testId         String?
  timeSpent      Int?                @default(0)
  photoUrl       String?
  score          Int?                @default(0)
  requestPhoto   Boolean             @default(true)
  showResults    Boolean             @default(true)
  instagram      String?
  companyId      String
  overallStatus  ApprovalStatus      @default(PENDING_EVALUATION)
  processId      String?
  company        Company             @relation(fields: [companyId], references: [id])
  process        SelectionProcess?   @relation(fields: [processId], references: [id])
  test           Test?               @relation(fields: [testId], references: [id])
  progresses     CandidateProgress[]
  responses      Response[]
  convertedTo    Student?
  testInvites    TestInvitation[]
  inviteHistory  UsedInviteCode[]
}

model SelectionProcess {
  id                String         @id @default(uuid())
  name              String // Nome do processo (ex: "Processo Seletivo Veterinário 2025")
  jobPosition       String // Cargo específico (ex: "Veterinário Plantonista")
  description       String?
  vacancyCount      Int            @default(1) // Número de vagas disponíveis
  registrationStart DateTime? // Data de início das inscrições
  registrationEnd   DateTime? // Data de término das inscrições
  cutoffScore       Int?
  expectedProfile   Json?
  evaluationType    String         @default("SCORE_BASED")
  companyId         String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  candidates        Candidate[]
  stages            ProcessStage[]
  company           Company        @relation(fields: [companyId], references: [id])
}

model ProcessStage {
  id                     String                    @id @default(uuid())
  name                   String
  description            String?
  order                  Int
  type                   String                    @default("TEST")
  scheduledDate          DateTime? // Data agendada para a etapa
  duration               Int? // Duração em minutos
  weight                 Int                       @default(1) // Peso na avaliação final
  requestCandidatePhoto  Boolean                   @default(false)
  showResultsToCandidate Boolean                   @default(false)
  processId              String
  testId                 String? // ID do teste associado quando type = "TEST"
  expectedProfile        Json? // Perfil esperado para perguntas opinativas
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt
  progresses             CandidateProgress[]
  process                SelectionProcess          @relation(fields: [processId], references: [id])
  test                   Test?                     @relation(fields: [testId], references: [id]) // Relação com o teste
  personalityConfig      ProcessPersonalityConfig?

  @@index([order])
}

model ProcessPersonalityConfig {
  id             String                   @id @default(uuid())
  processStageId String                   @unique
  emotionGroupId String?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  stage          ProcessStage             @relation(fields: [processStageId], references: [id])
  emotionGroup   EmotionGroup?            @relation(fields: [emotionGroupId], references: [id])
  traitWeights   PersonalityTraitWeight[]
}

model PersonalityTraitWeight {
  id                         String                   @id @default(uuid())
  traitName                  String // Nome do traço de personalidade
  weight                     Int // Peso do traço (5 para o mais importante, 4 para o segundo, etc.)
  order                      Int // Ordem de importância (1 para o mais importante)
  processPersonalityConfigId String
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  processPersonalityConfig   ProcessPersonalityConfig @relation(fields: [processPersonalityConfigId], references: [id], onDelete: Cascade)
}

model CandidateProgress {
  id             String             @id @default(uuid())
  testScore      Int?
  interviewScore Int?
  interviewNotes String?
  status         ProcessStageStatus @default(PENDING)
  finalDecision  ApprovalStatus     @default(PENDING_EVALUATION)
  candidateId    String
  stageId        String
  interviewerId  String?
  companyId      String
  completed      Boolean            @default(false)
  completedAt    DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  candidate      Candidate          @relation(fields: [candidateId], references: [id])
  company        Company            @relation(fields: [companyId], references: [id])
  interviewer    User?              @relation(fields: [interviewerId], references: [id])
  stage          ProcessStage       @relation(fields: [stageId], references: [id])
}

model Test {
  id              String           @id @default(uuid())
  title           String
  description     String?
  timeLimit       Int?
  cutoffScore     Int?
  expectedProfile Json?
  active          Boolean          @default(true)
  showResults     Boolean          @default(true)
  companyId       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  candidates      Candidate[]
  globalVersions  GlobalAccess[]
  stages          Stage[]
  testStages      TestStage[]
  processStages   ProcessStage[] // Relação inversa com ProcessStage
  company         Company          @relation(fields: [companyId], references: [id])
  testInvitations TestInvitation[]
  usedInviteCodes UsedInviteCode[]
}

model Stage {
  id           String      @id @default(uuid())
  title        String
  description  String?
  order        Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  testId       String?
  requestPhoto Boolean     @default(false)
  questionType String? // Tipo de pergunta permitido nesta etapa
  questions    Question[]
  test         Test?       @relation(fields: [testId], references: [id])
  TestStage    TestStage[]
}

model TestStage {
  id        String   @id @default(uuid())
  testId    String
  stageId   String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  test      Test     @relation(fields: [testId], references: [id])
  stage     Stage    @relation(fields: [stageId], references: [id])
}

model Question {
  id               String          @id @default(uuid())
  text             String
  stageId          String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  companyId        String?
  difficulty       DifficultyLevel @default(MEDIUM)
  globalQuestionId String?
  showResults      Boolean         @default(true)
  type             QuestionType    @default(MULTIPLE_CHOICE)
  categoryId       String?         @db.Uuid
  emotionGroupId   String? // ID do grupo de emoções para perguntas opinativas
  options          Option[]
  company          Company?        @relation(fields: [companyId], references: [id])
  globalQuestion   GlobalQuestion? @relation(fields: [globalQuestionId], references: [id])
  stage            Stage           @relation(fields: [stageId], references: [id])
  responses        Response[]
  categories       Category[]      @relation("CategoryToQuestion")
  emotionGroup     EmotionGroup?   @relation(fields: [emotionGroupId], references: [id])
}

model Option {
  id               String    @id @default(uuid())
  text             String
  isCorrect        Boolean   @default(false)
  questionId       String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  categoryId       String?
  weight           Int?      @default(0)
  position         Int?      @default(0)
  categoryName     String? // Nome da categoria/personalidade
  categoryNameUuid String? // UUID único para a categoria/personalidade
  emotionGroupId   String? // ID do grupo de emoções a que esta opção pertence
  explanation      String? // Explicação sobre esta opção/personalidade
  category         Category? @relation(fields: [categoryId], references: [id])
  question         Question  @relation(fields: [questionId], references: [id])
}

model Response {
  id                   String    @id @default(uuid())
  candidateId          String
  questionId           String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  questionText         String
  optionText           String
  timeSpent            Int       @default(0)
  allOptions           Json?
  companyId            String
  isCorrect            Boolean
  questionSnapshot     Json? // Snapshot completo da questão
  optionId             String? // ID da opção selecionada
  stageId              String? // ID da etapa
  stageName            String? // Nome da etapa
  categoryName         String? // Nome da categoria
  optionCharacteristic String? // Característica/personalidade associada à opção selecionada
  optionOriginalOrder  Int? // Posição original da opção antes do embaralhamento
  optionsOrder         Json? // Ordem em que as opções foram apresentadas ao candidato
  questionType         String? // Tipo da questão (múltipla escolha, opinativa, etc.)
  candidate            Candidate @relation(fields: [candidateId], references: [id])
  company              Company   @relation(fields: [companyId], references: [id])
  question             Question  @relation(fields: [questionId], references: [id])

  @@unique([candidateId, questionId])
}

model TestInvitation {
  id          String       @id @default(uuid())
  code        String       @unique
  expiresAt   DateTime
  sentAt      DateTime?
  attempts    Int          @default(0)
  status      InviteStatus @default(PENDING)
  testId      String
  candidateId String
  companyId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  candidate   Candidate    @relation(fields: [candidateId], references: [id])
  company     Company      @relation(fields: [companyId], references: [id])
  test        Test         @relation(fields: [testId], references: [id])

  @@unique([candidateId, testId])
  @@index([code])
}

model UsedInviteCode {
  id          String    @id @default(uuid())
  code        String    @unique
  usedAt      DateTime
  candidateId String
  companyId   String
  createdAt   DateTime  @default(now())
  testId      String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  company     Company   @relation(fields: [companyId], references: [id])
  test        Test      @relation(fields: [testId], references: [id])
}

model Student {
  id              String     @id @default(uuid())
  enrollmentDate  DateTime   @default(now())
  progress        Float      @default(0)
  userId          String     @unique
  convertedFromId String?    @unique
  companyId       String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  company         Company    @relation(fields: [companyId], references: [id])
  convertedFrom   Candidate? @relation(fields: [convertedFromId], references: [id])
  user            User       @relation(fields: [userId], references: [id])
  
  // Training system relations
  courseEnrollments CourseEnrollment[]
  lessonProgress    LessonProgress[]
  testAttempts      TestAttempt[]
  accessLogs        TrainingAccessLog[]
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  options     Option[]
  questions   Question[] @relation("CategoryToQuestion")
}

model Plan {
  id            String         @id @default(uuid())
  name          String
  description   String?
  price         Float
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  companies     Company[]
  features      PlanFeature[]
  subscriptions Subscription[]
}

model PlanFeature {
  id         String   @id @default(uuid())
  planId     String
  featureId  String
  isIncluded Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  feature    Feature  @relation(fields: [featureId], references: [id])
  plan       Plan     @relation(fields: [planId], references: [id])

  @@unique([planId, featureId])
}

model Feature {
  id           String        @id @default(uuid())
  name         String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  planFeatures PlanFeature[]
}

model Subscription {
  id              String             @id @default(uuid())
  companyId       String             @unique
  planId          String
  status          SubscriptionStatus @default(PENDING)
  startDate       DateTime
  endDate         DateTime?
  lastPaymentDate DateTime?
  nextPaymentDate DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  paymentHistory  PaymentHistory[]
  company         Company            @relation(fields: [companyId], references: [id])
  plan            Plan               @relation(fields: [planId], references: [id])
}

model PaymentHistory {
  id             String        @id @default(uuid())
  subscriptionId String
  companyId      String
  amount         Float
  paymentDate    DateTime
  paymentMethod  PaymentMethod
  status         PaymentStatus
  transactionId  String?
  invoiceUrl     String?
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  company        Company       @relation(fields: [companyId], references: [id])
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
}

model GlobalTest {
  id          String           @id @default(uuid())
  title       String
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  companies   GlobalAccess[]
  questions   GlobalQuestion[] @relation("GlobalQuestionToGlobalTest")
}

model GlobalQuestion {
  id         String           @id @default(uuid())
  text       String
  type       QuestionType     @default(MULTIPLE_CHOICE)
  difficulty DifficultyLevel  @default(MEDIUM)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  questions  Question[]
  categories GlobalCategory[] @relation("GlobalCategoryToGlobalQuestion")
  tests      GlobalTest[]     @relation("GlobalQuestionToGlobalTest")
}

model GlobalCategory {
  id          String           @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  questions   GlobalQuestion[] @relation("GlobalCategoryToGlobalQuestion")
}

model GlobalAccess {
  id           String      @id @default(uuid())
  companyId    String
  globalTestId String?
  testId       String?
  createdAt    DateTime    @default(now())
  company      Company     @relation(fields: [companyId], references: [id])
  globalTest   GlobalTest? @relation(fields: [globalTestId], references: [id])
  test         Test?       @relation(fields: [testId], references: [id])
}

model CompanyBackup {
  id        String   @id @default(uuid())
  companyId String
  data      Json
  deletedAt DateTime @default(now())

  @@index([companyId])
}

model EmotionGroup {
  id                        String                     @id @default(uuid())
  name                      String
  description               String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  questions                 Question[]
  processPersonalityConfigs ProcessPersonalityConfig[]
}

// Training Management System Models

// Course model - represents a complete training course
model TrainingCourse {
  id                String              @id @default(uuid())
  name              String
  description       String?
  sectorId          String?
  companyId         String
  showResults       Boolean             @default(true)
  finalTestRequired Boolean             @default(false)
  finalTestId       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  company           Company             @relation(fields: [companyId], references: [id])
  sector            TrainingSector?     @relation(fields: [sectorId], references: [id])
  modules           TrainingModule[]
  enrollments       CourseEnrollment[]
  finalTest         TrainingTest?       @relation("CourseFinalTest", fields: [finalTestId], references: [id])
  accessLogs        TrainingAccessLog[]
}

// Module model - represents a section of a course
model TrainingModule {
  id          String          @id @default(uuid())
  name        String
  description String?
  order       Int
  courseId    String
  finalTestId String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  // Relations
  course      TrainingCourse  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     TrainingLesson[]
  finalTest   TrainingTest?   @relation("ModuleFinalTest", fields: [finalTestId], references: [id])
}

// Lesson model - represents individual learning content
model TrainingLesson {
  id          String               @id @default(uuid())
  name        String
  description String?
  order       Int
  moduleId    String
  type        TrainingContentType
  content     String               // URL for video/audio/slides, HTML content for text
  videoUrl    String?              // URL específica para vídeos (YouTube, Vimeo, etc.)
  slidesUrl   String?              // URL específica para apresentações de slides
  duration    Int?                 // Duration in seconds (for video/audio)
  finalTestId String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  
  // Relations
  module      TrainingModule       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  finalTest   TrainingTest?        @relation("LessonFinalTest", fields: [finalTestId], references: [id])
  progress    LessonProgress[]
}

// Sector model - represents company departments/sectors
model TrainingSector {
  id          String           @id @default(uuid())
  name        String
  description String?
  companyId   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Relations
  company     Company          @relation(fields: [companyId], references: [id])
  courses     TrainingCourse[]
}

// CourseEnrollment model - tracks student enrollment in courses
model CourseEnrollment {
  id             String          @id @default(uuid())
  studentId      String
  courseId       String
  enrollmentDate DateTime        @default(now())
  completionDate DateTime?
  progress       Float           @default(0) // 0-100%
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  student        Student         @relation(fields: [studentId], references: [id])
  course         TrainingCourse  @relation(fields: [courseId], references: [id])
}

// LessonProgress model - tracks student progress in individual lessons
model LessonProgress {
  id          String         @id @default(uuid())
  studentId   String
  lessonId    String
  timeSpent   Int            @default(0) // Time spent in seconds
  completed   Boolean        @default(false)
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  student     Student        @relation(fields: [studentId], references: [id])
  lesson      TrainingLesson @relation(fields: [lessonId], references: [id])
  
  @@unique([studentId, lessonId])
}

// TrainingTest model - represents tests for courses, modules, or lessons
model TrainingTest {
  id           String                @id @default(uuid())
  name         String
  description  String?
  timeLimit    Int?                  // Time limit in minutes
  passingScore Int                   @default(70) // Percentage needed to pass
  attempts     Int                   @default(1)  // Number of attempts allowed
  companyId    String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  
  // Relations
  company      Company               @relation(fields: [companyId], references: [id])
  questions    TrainingQuestion[]
  testAttempts TestAttempt[]
  
  // Relation to what this test belongs to (only one will be non-null)
  courseFinalTests  TrainingCourse[] @relation("CourseFinalTest")
  moduleFinalTests  TrainingModule[] @relation("ModuleFinalTest")
  lessonFinalTests  TrainingLesson[] @relation("LessonFinalTest")
}

// TrainingQuestion model - represents questions in training tests
model TrainingQuestion {
  id          String                @id @default(uuid())
  text        String
  type        TrainingQuestionType  @default(MULTIPLE_CHOICE)
  testId      String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  
  // Relations
  test        TrainingTest          @relation(fields: [testId], references: [id], onDelete: Cascade)
  options     TrainingOption[]
  answers     QuestionAnswer[]
}

// TrainingOption model - represents answer options for questions
model TrainingOption {
  id          String           @id @default(uuid())
  text        String
  isCorrect   Boolean          @default(false)
  questionId  String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Relations
  question    TrainingQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers     QuestionAnswer[]
}

// TestAttempt model - tracks student attempts at tests
model TestAttempt {
  id        String           @id @default(uuid())
  studentId String
  testId    String
  startTime DateTime         @default(now())
  endTime   DateTime?
  score     Float?
  passed    Boolean?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  // Relations
  student   Student          @relation(fields: [studentId], references: [id])
  test      TrainingTest     @relation(fields: [testId], references: [id])
  answers   QuestionAnswer[]
}

// QuestionAnswer model - tracks student answers to questions
model QuestionAnswer {
  id          String           @id @default(uuid())
  attemptId   String
  questionId  String
  optionId    String?
  isCorrect   Boolean?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Relations
  attempt     TestAttempt      @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question    TrainingQuestion @relation(fields: [questionId], references: [id])
  option      TrainingOption?  @relation(fields: [optionId], references: [id])
}

// TrainingAccessLog model - tracks student access to courses
model TrainingAccessLog {
  id        String         @id @default(uuid())
  studentId String
  courseId  String
  accessDate DateTime       @default(now())
  timeSpent Int            @default(0) // Time spent in seconds
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  // Relations
  student   Student        @relation(fields: [studentId], references: [id])
  course    TrainingCourse @relation(fields: [courseId], references: [id])
}

enum Role {
  SUPER_ADMIN
  COMPANY_ADMIN
  INSTRUCTOR
  STUDENT
  USER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum ProcessStageStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ApprovalStatus {
  PENDING_EVALUATION
  APPROVED_FOR_HIRING
  ON_HOLD
}

enum QuestionType {
  MULTIPLE_CHOICE
  OPINION_MULTIPLE
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum TestType {
  SELECTION
  COURSE_PRE
  COURSE_POST
}

enum InviteStatus {
  PENDING
  SENT
  EXPIRED
  COMPLETED
  CANCELED
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  EXPIRED
  CANCELED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_SLIP
  BANK_TRANSFER
  PIX
  MANUAL
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Enums for the training system
enum TrainingContentType {
  VIDEO
  AUDIO
  SLIDES
  TEXT
}

enum TrainingQuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  ESSAY
  OPINION_MULTIPLE
}
