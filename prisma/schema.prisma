generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  company   String?
  position  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Candidate {
  id             String     @id @default(uuid())
  name           String
  email          String
  phone          String?
  position       String?
  testDate       DateTime   @default(now())
  completed      Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  infoJobsLink   String?
  interviewDate  DateTime?
  observations   String?
  rating         Float?
  resumeFile     String?
  socialMediaUrl String?
  status         Status     @default(PENDING)
  inviteCode     String?    @unique
  inviteSent     Boolean    @default(false)
  inviteAttempts Int        @default(0)
  inviteExpires  DateTime?
  github         String?
  linkedin       String?
  portfolio      String?
  resumeUrl      String?
  responses      Response[]
}

model Question {
  id        String     @id @default(uuid())
  text      String
  stageId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  options   Option[]
  Stage     Stage      @relation(fields: [stageId], references: [id], onDelete: Cascade)
  responses Response[]
}

model Option {
  id         String     @id @default(uuid())
  text       String
  isCorrect  Boolean    @default(false)
  questionId String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  responses  Response[]
}

model Response {
  id          String    @id @default(uuid())
  candidateId String
  questionId  String
  optionId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  option      Option    @relation(fields: [optionId], references: [id])
  question    Question  @relation(fields: [questionId], references: [id])

  @@unique([candidateId, questionId])
}

model UsedInviteCode {
  id        String   @id @default(uuid())
  code      String   @unique
  usedAt    DateTime @default(now())
  expiresAt DateTime
}

model Stage {
  id          String     @id
  title       String
  description String?
  order       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  Question    Question[]
}

model tests {
  id          String   @id @default(uuid())
  title       String
  description String?
  timeLimit   Int?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
